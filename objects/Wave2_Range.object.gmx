<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Backyard_Enemy_Range_Stationary_Right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp=50;
run=0;
distance=0;
states=state.moving;
kmove=0;
stop=0;
moveSpeed=0;
attack=0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>score=score+(random_range(50,150));
//Money_Spawner_Script()

var rmoney,rx,ry,rxpos,rypos;
for (rmoney=random_range(30,50); rmoney&gt;=0; rmoney-=1)
{
    rx=random_range(-50,50);
    rxpos=Wave2_Range.x+rx;
    rypos=Wave2_Range.y+75;
    instance_create(rxpos,rypos,Money)
}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.lives&gt;=0 &amp;&amp; distance_to_object(Billy_obj)&lt;1500 &amp;&amp; global.pause!=1
{ 
    xdiff=Billy_obj.x-x;
    ydiff=Billy_obj.y-y;
    if xdiff&lt;0 //being negative would mean it is farther from the origin, making it to the right of billy, meaning the enemy will move to the left
    {
        leftorright=1; //He will travel to the left
        distance=400;
    }
    if xdiff&gt;0
    {
        leftorright=0; //He will travel to the right
        distance=-400;
    }
    xpos=Billy_obj.x+distance;
    if attack=0
    {
        if distance_to_object(Billy_obj)&gt;600 
        {
            states=state.moving;
        }
        if distance_to_object(Billy_obj)&lt;600
        {
            states=state.stationary;
        }
    }
    if attack=1
    {
        states=state.attacking;
    }
    if attack=2
    {
        states=state.retreating;
    }
    if attack=4
    {
        states=state.dead;
    }
    if attack=5
    {
        alarm[0]=1;
    }
    if place_meeting(x,y,Water)
    {
        states=state.hit;
    }
    
    switch(states)
    {
        case state.stationary:
            moveSpeed=0;
            move_towards_point(Billy_obj.x+distance,Billy_obj.y,moveSpeed);
            attack=1;
            break;
        case state.attacking:
            if leftorright=0
            {
                for(amount=random_range(5,10); amount&gt;=0; amount=amount-1)
                {
                    inst=instance_create(Wave2_Range.x-40,Wave2_Range.y+36,Enemy_Water);
                    with (inst)
                    {
                        speed=60;
                        direction=image_angle;
                    }
                }
            }
            if leftorright=1
            {
                for(amount=random_range(5,10); amount&gt;=0; amount=amount-1)
                {
                    inst=instance_create(Wave2_Range.x-40,Wave2_Range.y+36,Enemy_Water);
                    with (inst)
                    {
                        speed=-60;
                        direction=image_angle;
                    }
                }
            }
            attack=2;
            break;
        case state.moving:
            moveSpeed=7;
            if place_free(x,y)
            {
                move_towards_point(Billy_obj.x+distance,Billy_obj.y,moveSpeed);
            }
            else
            {
                x=xprevious;
                y=yprevious;
            }
                
            if leftorright=0
            {
                sprite_index=Backyard_Enemy_Range_Walking_Right;
            }
            if leftorright=1
            {
                sprite_index=Backyard_Enemy_Range_Walking_Left;
            }
            break;
        case state.dead:
            moveSpeed=0;
            move_towards_point(x,y,moveSpeed);
            attack=5;
            break;
        case state.retreating:
            
            if leftorright=0
            {
                moveSpeed=7;
                move_towards_point(Billy_obj.x-800,Billy_obj.y,moveSpeed);
                if distance_to_point(Billy_obj.x-800,Billy_obj.y)&lt;1
                {
                    moveSpeed=7;
                    move_towards_point(Billy_obj.x+distance,Billy_obj.y,moveSpeed);
                    attack=0;
                }
                
            }
            if leftorright=1
            {   
                moveSpeed=4;
                move_towards_point(Billy_obj.x+800,Billy_obj.y,moveSpeed);
                if distance_to_point(Billy_obj.x+800,Billy_obj.y)&lt;1
                {
                    moveSpeed=7;
                    move_towards_point(Billy_obj.x+distance,Billy_obj.y,moveSpeed);
                    attack=0;
                }
            }
            break;
        case state.hit:
            hp-=global.damagedone;
            if hp&lt;=0
            {    
                attack=4;
            }
            with instance_place(x,y,Water)
            {
                instance_destroy();
            }
            if hp&gt;0
            {
                states=state.retreating;
            }
            break;
        default:
            break;   
    }
}
else
{
    moveSpeed=0;
    move_towards_point(x,y,moveSpeed);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
